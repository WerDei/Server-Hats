plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group

repositories {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


// Mod publishing

import com.modrinth.minotaur.TaskModrinthUpload

def versionDisplayName = project.mod_name + ' - ' + project.version
def supportedMinecraftVersions = project.mod_supported_minecraft_versions.split(',')
def changelogText = new File('./CHANGELOG.md').text


task modrinth (type: TaskModrinthUpload) {
    group 'upload'
    token = project.modrinth_token // saved in user home
    projectId = project.modrinth_mod_id
    versionName = versionDisplayName
    versionNumber = project.version
    for (ver in supportedMinecraftVersions) {
        addGameVersion(ver)
    }
    versionType = project.mod_version_type
    changelog = changelogText
    uploadFile = remapJar
    addLoader('fabric')
}

curseforge {
    apiKey = project.curseforge_token // saved in user home
    project {
        relations {
            requiredDependency 'fabric-api'
        }
        id = project.curseforge_mod_id
        changelogType = 'markdown'
        changelog = changelogText
        releaseType = project.mod_version_type

        for (ver in supportedMinecraftVersions) {
            addGameVersion ver
        }
        addGameVersion 'Fabric'
        mainArtifact(remapJar) {
            displayName = versionDisplayName
        }
    }
}
